<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-15T16:38:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">우물안 우주</title><subtitle>Swift, iOS, macOS</subtitle><entry><title type="html">Swift compiler architecture</title><link href="http://localhost:4000/swift/compiler/architecture/2022/01/15/swift_compiler_architecture.html" rel="alternate" type="text/html" title="Swift compiler architecture" /><published>2022-01-15T15:50:00+09:00</published><updated>2022-01-15T15:50:00+09:00</updated><id>http://localhost:4000/swift/compiler/architecture/2022/01/15/swift_compiler_architecture</id><content type="html" xml:base="http://localhost:4000/swift/compiler/architecture/2022/01/15/swift_compiler_architecture.html">&lt;h1 id=&quot;swift-compiler-architecture&quot;&gt;Swift compiler architecture&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://qiita.com&quot;&gt;Qiita&lt;/a&gt;에 &lt;a href=&quot;https://qiita.com/rintaro&quot;&gt;@rintaro&lt;/a&gt;님이 포스팅한 포스팅한 일본어 &lt;a href=&quot;https://l.facebook.com/l.php?u=https%3A%2F%2Fqiita.com%2Frintaro%2Fitems%2F3ad640e3938207218c20%3Ffbclid%3DIwAR1NiW77-FJuHqHYi5PJjIS6BFtEKP3H2s4UIAI-GvTfEjcbwNlL3Gp58jQ&amp;amp;h=AT059KvKJPmm7UMHygfBeYAj3bDVF7nrvZ5M0aOgTG2uZdUzxGMEZYcoJ4XVPwh1Fb5eVqy5wIw3iephiwzYfwWgWBw4axeQ_6GXYUUupLs3Ph9e1XLOm-S6rhkbuX87qTjrzOPbMw&amp;amp;__tn__=-UK-y-R&amp;amp;c[0]=AT02ywht0jPSBe90GR_6d-r83cssAeMPYzSKAgAORNhCERtlk9-l5KuScz-N6ArSlTo3uObBA9ViZpc74uzdAWGgKFTKaGcQu73IjmGhPGKrOpGgQ6rPed8THV2fQUjPkBX7f6A_Rl70V86t8ZOf0PDdfIfD-DwedwHk36e43B6CuUiAJbeJ3xLwI_OEprXl8oNG2kDZmuRIqOHE&quot;&gt;원문&lt;/a&gt;을 번역한 글입니다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;글 자체는 2017년도의 글이라 업데이트를 글 작성 후에 개인적으로 진행해야겠네요&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Swift 컴파일러 개발을 시작해보고 싶은 분들을 위해, 컴파일러의 전체 구성이 어떻게 되어있는지 대략적으로 설명해보겠습니다. 코드를 읽을 때 참고가 되면 좋겠네요.&lt;/p&gt;

&lt;p&gt;저는 프로그램을 파악할 때, 엔트리포인트(entrypoint, 최초로 실행되는 곳, main 함수)를 알지 못하면 불안해집니다. 바꿔 말하면, 엔트리포인트만 알면 거기서부터 처리 과정을 따라가면 좋기 때문에, 그 다음 과정에 대한 이해도 굉장히 쉬워집니다. 그렇기 때문에 가장 먼저 swift 명령어의 엔트리포인트 부터 시작하겠습니다.&lt;/p&gt;

&lt;p&gt;주의: 각 진입부는 깃헙에 있는 실제 코드의 링크를 달고 있는데, 행번호는 시간이 지나면서 변경되기 때문에, 파일까지의 링크만 달아놓았습니다. 함수명등으로 검색해주세요.&lt;/p&gt;

&lt;h2 id=&quot;드라이버-driver&quot;&gt;드라이버 (Driver)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift&lt;/code&gt; 명령어 인데, 실체는 &lt;a href=&quot;https://github.com/apple/swift/tree/master/tools/driver&quot;&gt;tools/driver&lt;/a&gt; 입니다.&lt;/p&gt;

&lt;p&gt;tools/driver/driver.cpp에 main 함수가 있어, 여기서부터 &lt;a href=&quot;https://github.com/apple/swift/tree/master/lib&quot;&gt;lib 디렉토리&lt;/a&gt; 에서 구현하고 있는 각종 라이브러리를 호출하도록 되어있습니다.&lt;/p&gt;

&lt;p&gt;드라이버에는 명령어 argument에 따른 몇개의 모드가 존재합니다.&lt;/p&gt;

&lt;h3 id=&quot;서브-커맨드-런처-sub-command-launcher&quot;&gt;서브-커맨드 런처 (sub-command launcher)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift package&lt;/code&gt;로 호출되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift&lt;/code&gt;실행파일과 동일한 디렉토리에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift-package&lt;/code&gt;를 기동할 뿐인 런처입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift&lt;/code&gt;명령어의 가장 첫 번째 argument가 아래의 조건에 모두 일치할 때 실행됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-로 시작하지 않는다&lt;/li&gt;
  &lt;li&gt;.을 포함하지 않는다 (파일명이 아니다)&lt;/li&gt;
  &lt;li&gt;repl이 아니다 &lt;sup&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;시험삼아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swift oozoofrog&lt;/code&gt; 같은 느낌으로 명령어를 실행하면 swift-oozoofrog 를 찾지 못하는 느낌의 에러를 표시하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;1&quot;&gt;1&lt;/a&gt; 최근(여기선 2017년)까지는 run도 대상이었습니다만, 내장하고 있는 swift run은 &lt;a href=&quot;https://github.com/apple/swift-evolution/blob/master/proposals/0179-swift-run-command.md&quot;&gt;SE-0179&lt;/a&gt;의 swiftpm의 기능을 덮어쓰기 때문에 폐기되었습니다. &lt;a href=&quot;https://bugs.swift.org/browse/SR-5332&quot;&gt;SR-5332&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="swift" /><category term="compiler" /><category term="architecture" /><summary type="html">Swift compiler architecture</summary></entry><entry><title type="html">Combine(Scheduler) + iOS 13.1 = Crash</title><link href="http://localhost:4000/swift/combine/crash/2021/12/31/crash_combine_iOS13.html" rel="alternate" type="text/html" title="Combine(Scheduler) + iOS 13.1 = Crash" /><published>2021-12-31T10:23:56+09:00</published><updated>2021-12-31T10:23:56+09:00</updated><id>http://localhost:4000/swift/combine/crash/2021/12/31/crash_combine_iOS13</id><content type="html" xml:base="http://localhost:4000/swift/combine/crash/2021/12/31/crash_combine_iOS13.html"># OMG
거두절미하고 Combine에서 Scheduler Type중 DispatchQueue를
사용하는 경우 크래시가 발생하게 되어 가볍게 글을 남깁니다.

## 조건
iOS 13.1

두 DispatchQueue.SchedulerTimeType의 값이 다를때 Comparable 연산자 사용

DispatchQueue.SchedulerTimeType을 그대로 사용하면 문제가 없고, Generic으로
사용할 때 이슈 발생

## 현상
iOS 13.0 에서는 throttling등에서 SchedulerTimeType에 대한 비교를 Comparable을 사용하지 않고, 직접 SchedulerTimeType.Stride
로 비교하고 있어 이슈가 발생하지 않음

iOS 13.1 에서는 Scheduler로 DispatchQueue를 사용시 SchedulerTimeType을 비교에 사용하는데 크래시 발생

## 추정
iOS 13.1에 포함된 libswiftDispatch.dylib의  DispatchQueue.SchedulerTimeType에 대한 Comparable 연산자의 코드에 오류가 존재

### 예
~~~swift
let a: DispatchQueue.SchedulerTimeType = 2 // 이보다 좀더 복잡하지만 대충할께요
let b: DispatchQueue.SchedulerTimeType = 1

a == b // crash
a != b // crash
a &gt;= b // crash
a &gt; b // OK
a &lt; b // crash
a &lt;= b // OK
~~~

### 재현코드
~~~swift
class ViewController: UIViewController {
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let button = UIButton(type: .custom)
        button.setTitle(&quot;CLICK&quot;, for: .normal)
        button.setTitleColor(.darkText, for: .normal)
        button.addTarget(self, action: #selector(click), for: .touchUpInside)
        
        view.addSubview(button)
        
        button.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            button.centerYAnchor.constraint(equalTo: view.centerYAnchor),
        ])
    }
    
    @objc func click() {
        let a: DispatchQueue.SchedulerTimeType = .init(.init(uptimeNanoseconds: 4))
        let b: DispatchQueue.SchedulerTimeType = .init(.init(uptimeNanoseconds: 2))
//        print(a &lt; b)
        self.test(s: DispatchQueue.main, a: a, b: b)
    }

    func test&lt;S&gt;(s: S, a: S.SchedulerTimeType, b: S.SchedulerTimeType) where S: Combine.Scheduler {
        if a == b {
            print(&quot;OK&quot;)
        } else {
            print(&quot;NOT&quot;)
        }
    }
}

~~~

## 결론
iOS 13.1 에서 Combine을 사용할 때 Scheduler가 필요한 경우에는 RunLoop를 사용하자</content><author><name></name></author><category term="swift" /><category term="combine" /><category term="crash" /><summary type="html">OMG 거두절미하고 Combine에서 Scheduler Type중 DispatchQueue를 사용하는 경우 크래시가 발생하게 되어 가볍게 글을 남깁니다.</summary></entry><entry><title type="html">ABI 안정화 그리고 그 이상</title><link href="http://localhost:4000/swift/abi/2019/03/28/abi_stability_and_more.html" rel="alternate" type="text/html" title="ABI 안정화 그리고 그 이상" /><published>2019-03-28T10:23:56+09:00</published><updated>2019-03-28T10:23:56+09:00</updated><id>http://localhost:4000/swift/abi/2019/03/28/abi_stability_and_more</id><content type="html" xml:base="http://localhost:4000/swift/abi/2019/03/28/abi_stability_and_more.html">* TOC
{:toc}

*원문 [ABI Stability and More](https://swift.org/blog/abi-stability-and-more/)*

macOS, iOS, watchOS, 그리고 tvOS에서 스위프트의 ABI를 안정화시키는 것은 오랜 목표였습니다. 안정적인 ABI는 모든 언어에서 중요하지만, 스위프트 생태계에서 그것이 주는 궁극적인 이점은 앱과 라이브러리들의 [바이너리(-코드) 호환성(Binary-code compatibility)](https://en.wikipedia.org/wiki/Binary-code_compatibility)을 가능하게 한다는 것입니다. 이 글에서는 스위프트 5에서 바이너리 호환성이 어떤 의미인지, 그리고 앞으로의 스위프트 배포에 어떤 혁신을 가져올지 기술합니다.

다른 플랫폼에서는요? 라는 질문을 하실 수 있을거 같네요. ABI 안정화는 스위프트를 컴파일하고 실행할 수 있는 모든 운영체제에 적용되었습니다. 애플 플랫폼 상에서 스위프트 5의ABI는 안정화 되었다고 공표되었습니다. Linux, Windows, 그 외의 성숙한 플랫폼의 개발자라면, 스위프트 Core Team이 안정화 작업을 진행중에 있습니다.

스위프트 5는 앱을 위한 바이너리 호환성을 제공합니다. 앞으로는 한 버전의 스위프트 컴파일러로 빌드한 앱이 다른 버전으로 빌드한 라이브러리와의 소통을 보장합니다. 이는 이전 버전(*-swift-version 4.2*)과의 호환 모드에서도 마찬가지입니다. 

![Image of abi stability](https://swift.org/assets/images/abi-stability-blog/abi-stability.png)

이 예제를 보면, 스위프트 5.0으로 빌드한 앱이 스위프트 5 표준 라이브리가 설치된 시스템에서 돌아가는 것과 마찬가지로 스위프트 5.1 혹은 스위프트 6으로 가정한 시스템에서도 잘 돌아가는 것을 보여줍니다.

*(이 글에서 스위프트 5.0 이상의 버전은 물론 모두 가정입니다.)*

Apple OS들에서의 ABI 안정화는 다음 업데이트되는 모든 OS에 더 이상 Swift standard library 와 **overlay** 라이브러리를 포함할 필요가 없어 앱의 다운로드 사이즈가 줄어든다는 뜻입니다. 스위프트 런타임은 Objective C 런타임과 마찬가지로 OS에 포함되게 됩니다.

이런 변화가 앱 스토어에 앱을 배포하는데 어떻게 영양을 미치는지는 [Xcode 10.2 release notes](https://developer.apple.com/documentation/xcode_release_notes/xcode_10_2_beta_release_notes/swift_5_release_notes_for_xcode_10_2_beta)에서 상세한 정보를 확인할 수 있습니다.

&lt;br/&gt;
## 모듈 안정화(Module Stability) 

ABI 안정화는 앱 실행시에 스위프트의 여러 버전을 사용할 수 있는 것에 대한 내용입니다. 컴파일 타임에는 어떨까요?</content><author><name></name></author><category term="swift" /><category term="abi" /></entry><entry><title type="html">유니코드 1.0 연대기</title><link href="http://localhost:4000/unicode/chronology/2019/03/20/chronology_unicode.html" rel="alternate" type="text/html" title="유니코드 1.0 연대기" /><published>2019-03-20T23:59:48+09:00</published><updated>2019-03-20T23:59:48+09:00</updated><id>http://localhost:4000/unicode/chronology/2019/03/20/chronology_unicode</id><content type="html" xml:base="http://localhost:4000/unicode/chronology/2019/03/20/chronology_unicode.html"># 유니코드 1.0 연대기

*이 글은 unicode.org에 수록되어있는 [unicode version 1.0](https://www.unicode.org/history/versionone.html)가 나오기 까지의 연대별 히스토리입니다.*

## 1986~1987

제록스(Xerox)에서, Huan-mei Liao, Nelson Ng, Dave Opstad,  그리고 Lee Collins는 중국어 문자들을 확장하기 위한 폰트 작업을 빠르게 진행하기 위해 일본어(JIS)와 중국어(간체와 번체) 문자들 사이에서 공통문자들의 맵을 데이터베이스화하는 작업을 시작했다. 실제로도 토론토의 나카지마와 같은 제록스의 사용자들은 부족한 중국어 문자를 확장하기 위해 JIS를 이용하기도 했다. 이는 Eric Mader에 의해 작성된 Han Unification에 대한 찬반 논의로 이어졌다.

한편, 애플에서는(아 나 이런거 정말 좋아), [Apple File Exchange](https://en.wikipedia.org/wiki/Apple_File_Exchange )의 개발이 범용 문자셋에 대한 논의로 이어졌다. 애플의 Mark Davis가 [ANSI X3L2](http://sova.si.edu/record/NMAH.AC.0311 )(무료 스미스소니언 온라인 아카이브에 정보가 있군요. 컴퓨터 문자셋과 코드에 대한 논의였나봅니다.)에 참여를 시작했다.

## 1987년 4월

Peter Fenwick(신경심리학자가 여기서 왜 나와?냐면 Joe[seph D.] Becker가 바로 제록스에서 인공지능 신경망 연구자였거든요.)가 제록스를 방문하며 &quot;0에서 시작하여 다음 문자를 추가&quot;라는 Unicode의 원래 아키텍처에 영감을 줬단다. 또한, RLG(The Research Libraries Group)의 Alan Tucker와 Karen Smith-Yoshimura와 토론토 대학의 Nakajima도 참석했다.

## 1987년 가을

Joe Becker의 제록스 그룹은 Davis와 다국어에 대한 문제를 논의하기 시작했다. 새 캐릭터 인코딩이 주요 주제였다.

7년간의 Xeros [XCCS](https://ipfs.io/ipfs/QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco/wiki/Xerox_Character_Code_Standard.html )(Xerox Character Code Standard) 체계에 대한 Opstad에서의 경험에 의한 평가는 고정폭을 가진 디자인이 바람직하게 보였다. (어렵네, 네 그냥 고정폭이 좋은거 같어 라고 읽으세요.)

## 1987년 12월

Becker가 작성한 문서에서 유일하고(unique), 범용적이고(universal) 그리고, 일관성(uniform)있는 문자 인코딩이라는 의미에서 &quot;Unicode&quot;라는 용어가 처음 사용되었다. 

## 1988년 2월

애플에서는 Collins가 작업을 시작했다. 첫 번째 작업들 중 하나는 &quot;High Text(Ascii는 Low Text)&quot;라고 부르는 Davis의 고정폭을 가진 16비트 문자 인코딩을 애플의 차기 시스템에 고려하는 것이었다. 조사는 다음 세 가지로 모아졌다:
    a. 고정, 가변 폭 텍스트의 접근성 비교
    b. 2바이트 문자열에 대한 모든 시스텀 저장소의 요구사항 조사
    c. 세계의 모든 알파벳에 대해 준비한 문자 수
여러 문자열 인코딩에 대한 경험과 이런 조사 결과를 기반으로 유니코드의 기본 아키텍처를 만들어졌다. 이것은 Collins의 **유니코드 원칙** 문서에 더해졌다.

Becker는 달라스에서 열린 Uniforum(유닉스 컨퍼런스)에서 /usr/group 국제 소위원회에 유니코드 원칙들을 소개했다.

## 1988년 4월

애플에서 첫 유니코드 문자 인코딩의 프로토타입을 시작했다. 유니코드 지원을 [TrueType](https://ko.wikipedia.org/wiki/트루타입 )에 포함하기로 결정했다.

## 1988년 여름

Becker와 Collins는 한자 통합을 위한 표준을 논의하기 위해 팔로알토 다운타운의 RLG별관에서 RLG의 Tucker와 Smith-Yoshimura와의 만남을 가졌다.

## 1988년 7월

애플은 **Han Unification**의 연구를 위해 RLG의 CJK 문자 데이터베이스를 구입했다.

## 1988년 9월

Becker와 Collins는 **Han Unification**과 ISO DP 10646에서 [C0 C1](https://en.wikipedia.org/wiki/C0_and_C1_control_codes ) 제어 문자의 사용을 제안하기 위해 ANSI X3L2를 방문했다. 후에, Becker는 ISO WG2에서 **Unicode '88'**(에 에어리어 88...)을 소개했다.

## 1988년 10월

Collins와 Becker는 Association of Font Information(이하 AFII)의 Ed Smura의 권고로 한자에 대한 논의를 위해 도쿄에서 열린 AFII 회합에 참여했다. Han Unification과 관련한 Xerox Han 상호 참조 도구에 대한 Fuji Xerox에서의 데모가 포함되었다.

## 1988년 11월

Collins가 Unicode Non-Han 데이터베이스를 만들고, Unicode의 명칭과 매핑을 위한 첫 데이터베이스의 초기 범위를 정의하기 시작했다. 계속된 회의를 통해 핵심 내용과 문제가 개선되었다. 원 디자인은 복합 문자를 제외하고 텍스트 크기와 텍스트 형태의 구분에 기초했다.

## 1989년 1월

Collins는 제록스의 표준을 구현하는 Ed Smura, Abhay Busha, Becker와 만나 Han Unification을 위해 데이터베이스를 공유하는 문제에 대해 논의했다. 제록스는 [ISO 10646](https://ko.wikipedia.org/wiki/국제_문자_세트 )에 대한 다양한 기업의 대안을 지원한다. 양 사의 데이터베이스의 조화를 목표로 데이터 교환에 동의한다.

Metaphor는 자사의 소프트웨어의 국제화를 지원하기 위해 16비트 문자 인코딩을 포함하기로 결정한다.

## 1989년 2월

유니코드 회합에 Metaphor (Mike Kernaghan과 Ken Whistler), RLG(Karen Smith-Yoshimura와 Joan Aliprand)가 참여했다.

Sun Microsystems의 Glenn Wright와 Adobe의 John Renner, Claris의 Joe Bosurgi, HP의 Mike Ksar, NeXT의 James Higa, 그리고 Pacific Rim Connections의 James Caldwell이 참여하며 유니코드 회합은 격월로 열리게 되었다.

1991년 유니코드 협회 발족과 함께 유니코드 기술 위원회로 바뀌게 되는 모임에 번호를 매기기 시작한 것은 1989년 2월 회합에서 시작되었다.

초창기에 Xerox, Metaphor, Appple, 그리고 HP에서 열리던 회의를 거쳐 RLG가 공식적인 회합장소를 제공했다.

Glenn Wright는 유니코드에 대한 넷상의 토론을 위해 Unicode@sun.com을 만들고 관리하기 시작했다.

## 1989년 3월

Collins는 RLG와 CCCII의 데이터를 사용해서 [Hypercard](https://ko.wikipedia.org/wiki/하이퍼카드 )로 유니코드 Han Database 만들기 시작했다. [Big Five/CNS](https://ko.wikipedia.org/wiki/Big5 ), [GB](https://en.wikipedia.org/wiki/GB_18030 ), [JIS](https://en.wikipedia.org/wiki/JIS_encoding ), [KS](https://en.wikipedia.org/wiki/KS_X_1001 ), 그리고 EACC로 이루어진 Han 표준은 5월에 완성되었다.

## 1989년 4월

당시까지의 ISO 등록 표준에 모든 복합 문자를 포함하고, 현존하는 모든 표준에 round trip 변환을 보장한다는 결정을 내렸다.

## 1989년 5월

Becker와 Collins는 일반적인 Han 문자에 대해 논의하기 위해 홍콩에서 열린 AFII 모임에 참석했다. AFII는 ISO DP 10646을 통해 Han Unification의 지원을 결정한다.

## 1989년 8월

Becker와 Collins는 Apple과 Xerox의 Han 데이터베이스의 차이점을 해결하여 통합한다. 기존의 표준에서 모든 특징을 유지하고 변형을 해결하기 위해 JIS와 Chinese 가이드라인을 따르기로 결정한다.

양방향 (중동) 그리고 인도어 텍스트를 위해 논리적 순번을 사용하기로 결정한다. 다중 임베딩(역주: 화면에 표시하는 문자가 아닌 문자열의 좌우 순서 등을 지시하는 특수한 유니코드등을 삽입하는 것에 대한 지칭입니다. 아마도..)에 대한 문제가 처음 논의된다.

## 1989년 9월

Becker와 Collins는 (Becker가 인쇄한) Unicode의 첫 초안을 ANSI X3L2에 제안한다. 그 결과로 ANSI측에서 Han Unification과 C0, C1의 사용의 절충안을 ISO에 제시한다. Apple, Claris, Metaphor, NeXT 그리고 Sun이 Unicode를 대변하여 참여했다. 이 첫번째 초안은 Han의 정렬을 위해 Davis의 Gray code 체계를 사용한다.
이 절충안으로 유니코드 작업그룹은 스크립트 하위 집합을 위해 기존의 ISO 정렬과 ISO 명명 체계를 사용하기로 결정한다.

## 1989년 10월

Collins는 TrueType에 대한 Apple과 Microsoft간의 협조를 통해 Microsoft와IBM에 Unicode를 제공한다.
Collins는 ANSI와 Unicode를 대표하여 베이징에서 열린 Han Unification에 대한 ISO Ad Hoc에 참석한다. 이 회합을 통해 Han 문자에 대한 인간 친화적 문자 순서를 권고한다. Unicode는 Han 통합을 위해 중국과 협력하기로 결의한다.
Collins는 Apple의 일본인 기술자와 Unicode에 대해 논의하고 지원을 얻는다.
Davis는 요르단의 암만에서 열린 ISO SC2/WG2에서 Unicode를 대표하여 참석한다. WG2는 [분음 기호](https://support.microsoft.com/ko-kr/help/4033601/diacritical-marks-described)(역주: ü등의 문자위에 붙는 발음 기호)를 허용하기로 한다.
도쿄에서 AT&amp;T Unix Pacific의 Rick McGowan은 unicode@sun.com을 통해 Unicode의 지원을 위한 활발한 토론을 시작한다.

## 1989년 11월

Unicode Han Set에 JIS X 0212-1990과 GB1을 포함하기 위한 맵핑을 식별하기 위해 Cora Zhang를 고용한다.

## 1989년 12월

Collins는 TrueType 폰트인 Jamboree에서 애플의 다음 문자열 셋으로 Unicode을 제시한다.
Becker는 Unix 국제화 회의에서 Unicode를 발표한다.

## 1990년 1월

True Type에 대한 Apple과 Microsoft의 협력으로 Microsoft는 Unicode에 흥미를 보이기 시작한다. Microsoft의 Michel Suignard와 Asmus Freytag는 Unicode 회의에 참여하기 시작한다.
McGowan 나중에 도쿄에서 처음 열린 Unicode회의에 Apple Japan, Microsoft KK 등과 함께 참가한다.
JIS 위원회가 Unicode에 대해 논의하기 위한 만난다. Collins는 이 회의의 결과로 나온 Pro Tajima의 논의를 번역한다. Becker와 Collins는 답변서를 작성한다.
Sebold Report on Desktop Publishing은 폰트에 대한 논의의 부분으로 Unicode 프로젝트를 하일라이트로 싣는다. Becker, Collins 그리고 Davis는 4월 이슈에 두 가지에 대한 긴 정정문으로 응답한다.

## 1990년 3월

Collins와 Becker는 대한민국에서 열린 ISO WG2 Ad Hoc on Han Unification에 참가한다. 유니코드의 새로운 구성은 강희자전식 부수 획 순서에 근거해서 배포되었다.

Han을 제외한 유니코드는 이 시점에서 기본적으로는 완료되었다. 크로스 맵핑(아직 정확한 의미를 모르겠다.)과 명명 작업이 시작된다.

호환성을 위해서 0x0080-0x009F C1 영역에서 문자를 제거했다. **Roundtrip**이 ISO 8859 와 ISO 6937을 통해 보증되었다.

Sun Microsystems의 Glenn Wright와 Metaphor의 Mike Kernaghan은 유니코드 협회의 법인체를 설립하는 작업에 들어간다.

Joan Winters는 유니코드 모임에서 SHARE(1955년에 결성된 최초의 IT 사용자 그룹)를 대표해 참석하기 시작한다. (SHARE는 신문지상이나 컨퍼런스에서 Unicode가 주목 받을 수 있도록 활동한다.)

Microsoft Japan의 키타노, Apple Japan의 야마무라 그리고 McGowan 세 명은 일본 유니코드 스터디 그룹을 발족한다. 후에 Apple Japan의 타카하시, 야마다, IBM 재팬의 키도, 스즈키, Syn Microsystems Japan의 쿠로사카, Fujitsu의 세키구치가 참여한다.</content><author><name></name></author><category term="unicode" /><category term="chronology" /><summary type="html">유니코드 1.0 연대기</summary></entry><entry><title type="html">유니코드(Unicode)</title><link href="http://localhost:4000/unicode/history/2018/04/13/unicode.html" rel="alternate" type="text/html" title="유니코드(Unicode)" /><published>2018-04-13T22:13:26+09:00</published><updated>2018-04-13T22:13:26+09:00</updated><id>http://localhost:4000/unicode/history/2018/04/13/unicode</id><content type="html" xml:base="http://localhost:4000/unicode/history/2018/04/13/unicode.html">* TOC
{:toc}

*더 이상 유니코드 때문에 이것저것 찾아보며 열받기 싫어서 머리에 넣어놓기로 했다.*

참고: [unicode.org](https://unicode.org)

# 유니코드의 역사

## 유니코드 협회(Unicode Consortium)
제록스(Xerox)의 조 베커(Joe Becker)와 애플의 리 콜린스(Lee Collins), 마크 데이비스(Mark Davis)에 의해 'Unicode'라고 불린 새로운 캐릭터 인코딩이 논의되기 시작했고, 4년 후인 1991년 1월, 캘리포니아 주에서 유니코드 협회가 발족되었다. (아주 잘 했다.)

## 짧게 보는 유니코드

### 유니코드의 주요 목표

* 범용성(universal) - 모든 언어에 대응.
* 일관성(uniform) - 효율적인 접근을 위한 고정폭을 가진 코드.
* 유일성(unique) - 비트 배열은 하나의 캐릭터를 위한 하나의 해석만을 가짐.

16비트 범용 코드는 새로운 개념은 아니며, ISO 멀티 바이트 문자 인코딩의 원래 원칙에서도 그래픽 문자를 위한 ISO 표준 개발과 2 바이트 그래픽 문자셋을 위한 코딩에서 프로그래밍 언어는 각 문자열에 동일한 양의 저장소를 가질 것을 고려해야 한다고 명시했다. \[ISO/TC97/SC2 N1436, 1984\]
- 원본 문서를 못찾겠다. 살려줘. (TC97의 TC는 technical commitee의 약자이다(from. johngrib))

### 기원
애플과 제록스의 엔지니어 세 명이 무슨일로 토론을 했을까? 어쨌거나 1987년 말에 프로젝트를 시작했고, 1988년에 세 가지 조사가 완료되었단다.

- 고정폭, 가변폭(여기서 폭(width)는 바이트 길이를 의미하는듯)을 가진 텍스트의 접근성 비교
- 2 바이트 텍스트에 대한 시스템 저장소의 요구사항 조사
- 세계의 모든 철자에 대한 예비 문자의 갯수

요런 것들로 저 세 명의 혁명가 혹은 범죄자들이 유니코드를 위한 기본 아키텍처를 끌어냈다.

- 1988년
	- 콜린스가 유니코드 문자 데이터베이스 구축을 시작
원래 디자인은 복합 문자를 제외하고, 스크립트 내에서 알파벳순으로 정렬했다. 제록스는 폰트 구축을 위해 이미 [Unified Han](https://en.wikipedia.org/wiki/Han_unification )(한자 집합)이라는 데이터베이스를 구축했다. 애플의 콜린스는 [Han Unification](https://en.wikipedia.org/wiki/Han_unification ) 데이터베이스 구축을 위해 RLG\(The Research Libraries Group\)로부터 EACC 문자열의 데이터베이스를 사용했다. 베커와 콜린스는 후에 두 데이터베이스를 연계했고, 콜린스는 다른 국제 표준을 위해 다른 문자열들을 취합하며 해당 데이터베이스를 확장했다.

- 1989년
	- 초반, 다른 회사들이 참여. 당시, [Metaphor](https://en.wikipedia.org/wiki/Metaphor_Computer_Systems)의 켄 휘슬러(Ken Whistler)와 마이크 커나한(Mike Kernaghan), [RLG](https://en.wikipedia.org/wiki/Research_Libraries_Group)의 카렌 스미스 요시무라(Karen Smith-Yoshimura)와 조앤 앨리프랜드(Joan Aliprand), Sun의 글렌 라이트(Glen Wright)가 작업 그룹에 합류하여 디자인에 큰 기여를 시작했다.
	- 중반, 유니코드를 기존 표준에 가깝게 하기 위한 여러 변경이 있었다. 존재하던 모든 ISO 복합 문자(composite character)가 유니코드에 추가되었고, **[round trips](https://en.wikipedia.org/wiki/Round-trip_format_conversion)**(국제 표준에서 두 문자로 이루어진 모든 문자는 유니코드로 분류)가 추가되었고, 가능한 경우 [ISO 8859](https://ko.wikipedia.org/wiki/ISO/IEC_8859 )의 순서를 따르도록 변경되었다.
- 1990년
	- 초반, 마이크로소프트를 대표하여 Michel Suignard와 Asmus Freytag가 합류. 그들은 Whistler와 함께 다른 문자 인코딩 표준에 대한 매핑 테이블을 만들기 위해 광범위한 작업을 지속했다. 1990년 봄에 유니코드 알파벳과 기호는 완성되었지만, 교차 매핑 작업은 계속되었다. ISO 10646(유니코드 표준안 및 워킹 그룹), IBM, Mac과 국제 표준에 대한 이 광범위한 매핑 작업은 완전하고 효과적인 인코딩을 제작하는데 매우 가치있는 도움이 되었다.
	- Joan Winters가 Unicode 회의에서 SHARE를 대표해서 등장했다. IBM의 Isai Scheinberg와 J.G. Van Stee가 90년 중반에 합류했다. 토론토 대학(Tronto University)에서는 IBM과 함께 광범위한 검토와 연구가 계획되었다. 이 검토의 결과로 반각문자와 아랍어 문자의 호환 영역이 포함되었다. [Pacific Rim Connection](http://www.pacrim50.com)의 James Caldwell이 편집자로 참여해 산만한 문서들을 일관성 있는 표준 문서로 통합했다. 대부분의 문자 서술이 이 시점에서 완성되었다.
	- 90년 10월, 한자 작업 또한, 최종안이 완성되었다. 유니코드에 대한 최종 검토안을 널리 배포하여 작업 그룹이 다양한 경로로 얻은 의견을 평가하고 반영할 수 있는 기회를 제공하기로 결정했다. 마이크로소프트와 [Aldus](https://en.wikipedia.org/wiki/Aldus)는 자진해서 배포 비용을 부담하기로 했다.(올 마소 멋진데.) [NeXT](https://en.wikipedia.org/wiki/NeXT)의 Rick McGowan은 유니코드 표준의 차기 버전을 위한 추가적인 문자 데이터베이스 작업을 시작했다.
- 1991년 1월 3일, 캘리포니아 주에서 Mike Kernaghan, Bill English, Mark Davis 그리고, Asmus Freytag는 Unicode, Inc를 조직했다.

유니코드 협회의 원 목적은 '60000개가 넘는 도형 문자들을 위한 16비트 고정폭의 유니코드 문자 인코딩을 표준화, 확장 및 촉진'이었다. 유니코드 표준이 16비트 이상으로 성장한 부분을 반영하여 설명이 갱신되었다.

Unicode, Inc의 원년 멤버는 다음과 같다:
- Larry Tesler, Advanced Products 부사장, Apple Computer, Inc.
- Robert Carr, 소프트웨어 개발부문 부사장, GO Corporation
- Richard Holleman, Telecommunications 이사, IBM Corporation
- Charles Irby, 개발 부문 부사장, Metaphor Computer Systems
- Paul Maritz, Advanced Operation Systems 부사장, Microsoft Corporation
- Bud Tribble, 소프트웨어 공학 부사장, NeXT Computer Inc.
- Jay Israel, Advanced Technology 부사장, Novell, Inc.
- David Richards, 개발 부문 이사, The Research Libraries Group.
- John Gage, 데스크탑 개발 부문 부사장, Sun Microsystems Inc.
(맞다, 나 Advanced 번역 못해서 이러고 있다.)

Unicode, Inc의 초기 임원진은 다음과 같다:
- Mark Davis, 대표
- Mike Kernaghan,  부대표
- Joe Becker, 기술 부문 부대표
- Ken Whistler, 사무관
- Bill English, 재무관

다음은 [[chronology_unicode]]{유니코드 1.0 연대기}로 넘어간다.</content><author><name></name></author><category term="unicode" /><category term="history" /></entry><entry><title type="html">iOS 취약점 정리</title><link href="http://localhost:4000/2018/04/10/iosvulnerabilities.html" rel="alternate" type="text/html" title="iOS 취약점 정리" /><published>2018-04-10T22:14:19+09:00</published><updated>2018-04-10T22:14:19+09:00</updated><id>http://localhost:4000/2018/04/10/iosvulnerabilities</id><content type="html" xml:base="http://localhost:4000/2018/04/10/iosvulnerabilities.html">[cve](https://www.cvedetails.com/product/15556/Apple-Iphone-Os.html?vendor_id=49 )

현재까지 보고된 iOS 취약점 리스트

# 2007
### code of execution or overflow

1. iOS에서 WebKit의 javascript 엔진의 perl compatible regular expressions(줄여서 PCRE) 라이브러리에서 다중 힙 기반 버퍼 오버플로우를 통해 원격으로 특정 javascript를 통해 임의의 코드를 실행할 수 있다.
	- iOS 1.0.1 미만
	- 유형: code execution, overflow
	- 다만, 힙 메모리는 동적으로 지정되기 때문에, 이런 방식의 공격자체는 효과적이지는 않다고 한다.

# 2008

1. 공격자가 HTML문서를 통해 임의로 전화를 걸 수 있다.
	- iPhone 1.0 ~ 2.1, iPod touch 1.1 ~ 2.1
2. safari에서 HTML TABLE element를 제대로 처리하지 못하여 조작된 HTML을 통해 임의의 코드 실행이나 서비스 거부(메모리 오염 및 어플리케이션 크래시)를 발생시킬 수 있다.
	- iPhone 1.0 ~ 2.1, iPod touch 1.1 ~ 2.1
	- 유형: DoS, code execution, memory corruption
3. iFrame의 컨텐츠가 iFrame의 영역을 넘을 수 있음을 이용, 조작된 HTML을 통해 사용자 인터페이스를 [스푸핑](https://ko.wikipedia.org/wiki/스푸핑)할 수 있다.
	- iPhone 2.0 ~ 2.1, iPod touch 2.1
4. 암호 잠금 기능은 긴급 통화 화면에서 SMS 메시지를 표시하기 때문에, 중요한 메시지의 정보가 타인에게 노출될 수 있습니다.
	- iOS 1.0 ~ 2.1, iPod touch 1.1 ~ 2.1
	- 유형: Gain Information
5. Race condition in the Passcode Lock feature in Apple iPhone OS 2.0 through 2.1 and iPhone OS for iPod touch 2.0 through 2.1 allows physically proximate attackers to remove the lock and launch arbitrary applications by restoring the device from a backup.</content><author><name></name></author><category term="security," /><category term="iOS" /><summary type="html">cve</summary></entry><entry><title type="html">Bool</title><link href="http://localhost:4000/swift/2018/04/10/bool.html" rel="alternate" type="text/html" title="Bool" /><published>2018-04-10T12:00:00+09:00</published><updated>2018-04-10T12:00:00+09:00</updated><id>http://localhost:4000/swift/2018/04/10/bool</id><content type="html" xml:base="http://localhost:4000/swift/2018/04/10/bool.html"># Bool은?
- 놀랍게도 구조체다.

~~~swift

~~~</content><author><name></name></author><category term="swift" /><summary type="html">Bool은? 놀랍게도 구조체다.</summary></entry></feed>